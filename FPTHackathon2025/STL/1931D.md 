#### 🧠 Giải thích logic chính (Vietnamese)

Đây là bài toán đếm số cặp phần tử `(i, j)` sao cho:
- `i < j`
- `(a[i] + a[j]) % x == 0`
- và `a[i] % y == a[j] % y`.

#### Ý tưởng chính:

Với mỗi số `a`, ta quan tâm đến hai giá trị:
1. Phần dư của `a` khi chia cho `x`: gọi là `remX = a % x`.
2. Phần dư của `a` khi chia cho `y`: gọi là `remY = a % y`.

Cặp `(remX, remY)` đại diện cho đặc trưng của số đó để xét điều kiện.

Khi xử lý từng số `a`:
- Ta tìm xem đã có bao nhiêu số trước đó mà **khi cộng với `a` sẽ chia hết cho `x`** và **có cùng `remY`**.
- Để tổng `(prev_a + a) % x == 0`, thì `prev_a % x` phải bằng `(x - a % x) % x`. Gọi giá trị này là `neededRemX`.

Ta dùng một `map` để lưu tần suất các cặp `(remX, remY)` đã gặp, rồi cập nhật kết quả dần dần.

#### Ví dụ:
Nếu hiện tại `a % x = 3`, `x = 5`, thì ta cần một số có `% x = 2` để tổng chia hết cho `5`.

=> Vì vậy, ta kiểm tra `countMap[{2, remY}]` rồi cộng vào kết quả.

Sau đó, ta tăng tần suất của cặp `(remX, remY)` vừa gặp trong map.

---

📌 **Tóm tắt**:  
Duyệt mảng, với mỗi phần tử, tính cặp `{remX, remY}` và `{needX, remY}`, dùng map để đếm số lượng các cặp tương ứng đã xuất hiện → từ đó tính số cặp hợp lệ hiệu quả.

---

💡 Bài này có độ phức tạp `O(n)` cho mỗi test case nhờ việc chỉ duyệt 1 lần và dùng `map` tra cứu nhanh.